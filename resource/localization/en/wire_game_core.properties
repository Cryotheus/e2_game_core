#game bar
wire_game_core.bar.leave=Leave Game

#browser
wire_game_core.browser.info=View active games made with Wire Expression 2 Game Core below. Open games can be joined from here without an invite. If you'd like to create your own games with Expression 2, search up "game" in the E2Helper for a list of available functions. Alternatively, a list of functions will be available on the github. You can get to the github from the workshop page (the icon to the left of this text will link you to the workshop page).\n\nIf you'd like to make your game open so anyone can join it, you can use the "gameSetJoinable" function to do so. Alternatively, you can leave your game closed but send invites with the "gameRequest" function. Do note that this function has a cool down.
wire_game_core.browser.invalid=Invalid
wire_game_core.browser.title=Game Browser

#request GUI
wire_game_core.request.accept=Accept
wire_game_core.request.block=BLOCK
wire_game_core.request.deny=Deny
wire_game_core.request.info=[:name] has invited you to join their game.\n\nAccepting will grant them more access with Expression 2,\nbut you can revoke their access at anytime by using the context menu.\n\nThis invite expires in [:time] [:unit].
wire_game_core.request.title=Game request from [:name]

#settings visibility
wire_game_core.settings.visibility=Player visibility while in a game
wire_game_core.settings.visibility.1=Hide Excluded Players
wire_game_core.settings.visibility.2=Hide All Players
wire_game_core.settings.visibility.3=Reveal Players

#settings blocker
wire_game_core.settings.blocker.info=Uncheck the box to block a player from sending game requests to you.
wire_game_core.settings.blocker.reload=Regenerate List
wire_game_core.settings.blocker.title=Blocked Players

#misc
wire_game_core.units.second=second
wire_game_core.units.seconds=seconds

### e2 helper
wire_game_core.e2helper=[:prefix][:description]
wire_game_core.e2helper.wip=[[:wip]] [:prefix][:description]
wire_game_core.e2helper.wip.tag=WORK IN PROGRESS
wire_game_core.e2helper.wip.prefixed=[:wip]: [:text]

#prefixes
wire_game_core.e2helper.1=Only functions when you have not started a game.\n
wire_game_core.e2helper.2=Only functions when you have started a game.\n
wire_game_core.e2helper.3=Only functions when the chip has started a game.\n
wire_game_core.e2helper.4=Only functions when the chip has started a game, and the target player has not blocked you.\n
wire_game_core.e2helper.5=Only functions when the chip has started a game, and the target player is part of the game.\n
wire_game_core.e2helper.6=Only functions when the chip had previously started a game.\n

### e2 functions
wire_game_core.e2.gameClose=Closes the game, restoring all players. Returns 1 upon success, 0 upon failure.
wire_game_core.e2.gameOpen=Opens a game using the chip which runs it. You can only have one game open at a time! Only the chip that opened the game can use the game functions for the active game. If you wish to open a game on another chip, you must use gameClose to do so.
wire_game_core.e2.gamePlayerRemove(e.)=Removes the player from the game, restoring them to their original state.
wire_game_core.e2.gamePlayerRemove=Removes all players from the game, restoring them to their original states.
wire_game_core.e2.gameSetJoinable=Allows players to join the game from the game browser, without needing an invite from "gameRequest".
wire_game_core.e2.gameSetTitle=Sets the game's title that joining and browsing players will see.

#camera functions
wire_game_core.e2.gameCameraAng=Sets the camera's angle.
wire_game_core.e2.gameCameraCreate(n)=Creates a camera with the specified index. The camera will be removed when the game is closed.
wire_game_core.e2.gameCameraCreate(nv)=Creates a camera with the specified index and position. The camera will be removed when the game is closed.
wire_game_core.e2.gameCameraCreate(nva)=Creates a camera with the specified index, position, and angle. The camera will be removed when the game is closed.
wire_game_core.e2.gameCameraEntity=Returns the camera's entity.
wire_game_core.e2.gameCameraFOV=Sets the camera's field of view.
wire_game_core.e2.gameCameraLerp(nnv)=Moves the camera to the end_position using linear interpolation.
wire_game_core.e2.gameCameraLerp(nnvv)=Moves the camera to the end_position from the start_position using linear interpolation.
wire_game_core.e2.gameCameraLerpBezier=Moves the camera to the along a bezier curve.
wire_game_core.e2.gameCameraParent(ne)=Parents the camera the entity.
wire_game_core.e2.gameCameraPos=Sets the camera's position.
wire_game_core.e2.gameCameraRemove=Removes the camera.
wire_game_core.e2.gameCameraRemoveAll=Removes all cameras.
wire_game_core.e2.gameCameraUnparent=Unparents the camera.
wire_game_core.e2.gamePlayerSetCamera(e.)=Restores the player's view if they were in a camera.
wire_game_core.e2.gamePlayerSetCamera(e.n)=Sets the player's view to the camera.

#run on game death functions
wire_game_core.e2.gameDeathAttacker=Returns the entity that killed the victim if the current execution was caused by "runOnGameDeath".
wire_game_core.e2.gameDeathClk=Returns the player that died if the current execution was caused by "runOnGameDeath".
wire_game_core.e2.gameDeathInflictor=Returns the entity that inflicted damage on the victim if the current execution was caused by "runOnGameDeath".
wire_game_core.e2.runOnGameDeath=If set to 1, the expression will execute when a player that is part of your chip's game dies.

#game enable settings
wire_game_core.e2.gameEnableFallDamage=Enables or disables fall damage for all players in the game.
wire_game_core.e2.gameEnablePlayerCollision=Enables or disables the game's players' collisions with one another. This does not change the collisions with players outside of your game.
wire_game_core.e2.gameEnablePush=Enables or disables the ability for players to push others, requires Jordie's push mod, or compatible. > https://steamcommunity.com/sharedfiles/filedetails/?id=293535327
wire_game_core.e2.gameEnableSuicide=Enables or disables suicide for all players in the game.

#run on game join functions
wire_game_core.e2.gameJoinClk=Returns the player that joined the game if the current execution was caused by "runOnGameJoin".
wire_game_core.e2.runOnGameJoin=If set to 1, the expression will execute when a player joins the game created by your chip.

#run on game leave functions
wire_game_core.e2.gameLeaveClk=Returns a GAMELEAVE enum if the current execution was caused by "runOnGameLeave".
wire_game_core.e2.gameLeavePlayer=Returns the player that left the game if the current execution was caused by "runOnGameLeave".
wire_game_core.e2.runOnGameLeave=If set to 1, the expression will execute when a player leaves the game created by your chip.

#game info functions
wire_game_core.e2.gamePlayerCount=Returns the amount of players in the chip's game. Returns -1 on fail.
wire_game_core.e2.gamePlayerCount(e.)=Returns the amount of players in the chip's game. Returns -1 on fail.
wire_game_core.e2.gamePlayers=Returns the players of the current game.
wire_game_core.e2.gamePlayersAlive=Returns the players alive of the current game.
wire_game_core.e2.gamePlayersDead=Returns the players dead of the current game.

#player physics manipulation
wire_game_core.e2.gamePlayerApplyForce=Applies force to the player according to the given vector's direction and magnitude.
wire_game_core.e2.gamePlayerSetAng=Sets the player's eye angles.
wire_game_core.e2.gamePlayerSetPos=Sets the player's position.

#sounds
wire_game_core.e2.gamePlayerPlaySound(s)=Plays the specified sound on all players in the game. Volume, pitch, duration, etc. cannot be adjusted as the freedom to do so is not provided by the internal function. Returns 1 on success, the operation will be considered successful even if no players hear the sound.
wire_game_core.e2.gamePlayerPlaySound(e.s)=Plays the specified sound on the player. Volume, pitch, duration, etc. cannot be adjusted as the freedom to do so is not provided by the internal function. Returns 1 on success.

#player collectibles
wire_game_core.e2.gamePlayerGiveAmmo(e.sn)=Gives the player the specified amount (parameter #2) of ammo by its ammo type (parameter #1). Will return 1 on success.
wire_game_core.e2.gamePlayerGiveAmmo(e.snn)=Gives the player the specified amount (parameter #2) of ammo by its ammo type (parameter #1), and will show a HUD pop up if show_pop_up (parameter #3) is non-zero. Will return 1 on success.

wire_game_core.e2.gamePlayerGiveWeapon(s)=Gives all players the weapon by the class name, the weapon will not have ammo in reserve or clip. Will return the weapon on success, and "noentity" on fail.
wire_game_core.e2.gamePlayerGiveWeapon(e.s)=Gives the player the weapon by the class name, the weapon will not have ammo in reserve or clip. Will return the weapon on success, and "noentity" on fail.
wire_game_core.e2.gamePlayerGiveWeapon(sn)=Gives all players the weapon by the class name, the weapon will not have ammo in reserve, and will only have a full clip (and sometimes reserve ammo) if give_ammo is non-zero. Will return the weapon on success, and "noentity" on fail.
wire_game_core.e2.gamePlayerGiveWeapon(e.sn)=Gives the player the weapon by the class name, the weapon will not have ammo in reserve, and will only have a full clip (and sometimes reserve ammo) if give_ammo is non-zero. Will return the weapon on success, and "noentity" on fail.

wire_game_core.e2.gamePlayerSetClip1(e.n)=Sets the amount of ammo in the weapon's clip, this is a macro for "entity:gamePlayerSetClip1(string, number)".'
wire_game_core.e2.gamePlayerSetClip1(e.sn)=Sets the amount of ammo in the weapon's clip, given the class name.
wire_game_core.e2.gamePlayerSetClip1(sn)=Sets the amount of ammo in the weapon's clip for all players in the chip's game, given the class name.
wire_game_core.e2.gamePlayerSetClip2(e.n)=Sets the amount of ammo in the weapon's secondary clip, this is a macro for "entity:gamePlayerSetClip2(string, number)".'
wire_game_core.e2.gamePlayerSetClip2(e.sn)=Sets the amount of ammo in the weapon's secondary clip, given the class name.
wire_game_core.e2.gamePlayerSetClip2(sn)=Sets the amount of ammo in the weapon's secondary clip for all players in the chip's game, given the class name.

wire_game_core.e2.gamePlayerStripAmmo=Strips all the ammo from all players.
wire_game_core.e2.gamePlayerStripAmmo(e.)=Strips all the ammo from the specified player.

wire_game_core.e2.gamePlayerStripEverything=Strips all the ammo and weapons from all players.
wire_game_core.e2.gamePlayerStripEverything(e.)=Strips all the ammo and weapons the specified player.

wire_game_core.e2.gamePlayerStripWeapon=Strips all weapons from all players in the chip's game.
wire_game_core.e2.gamePlayerStripWeapon(e.)=Strips all weapons from the specified player.
wire_game_core.e2.gamePlayerStripWeapon(s)=Strips the weapon by its class name from all players.
wire_game_core.e2.gamePlayerStripWeapon(e.s)=Strips the weapon by its class name from the specified player.

#player's wellbeing
wire_game_core.e2.gamePlayerKill=Kills all players in the game.
wire_game_core.e2.gamePlayerKill(e.)=Kills the player.
wire_game_core.e2.gamePlayerRespawn=Respawns all players.
wire_game_core.e2.gamePlayerRespawn(e.)=Respawns the specified player.
wire_game_core.e2.gamePlayerSetArmor=Set the amount of armor all players in the chip's game.
wire_game_core.e2.gamePlayerSetArmor(e.n)=Set the amount of armor the player has.
wire_game_core.e2.gamePlayerSetHealth=Set the amount of health all players in the chip's game have.
wire_game_core.e2.gamePlayerSetHealth(e.n)=Set the amount of health the player has.
wire_game_core.e2.gamePlayerSetMaxHealth=Set the maxmimum amount of health all players in the chip's game have.
wire_game_core.e2.gamePlayerSetMaxHealth(e.n)=Set the maximum amount of health the player has.

wire_game_core.e2.runOnGameRespawn=If set to 1, the expression will execute when a player that is part of your chip's game is respawned.

#player multipliers
wire_game_core.e2.gamePlayerSetDamageDealtMultiplier(e.n)=Sets the player's damage dealt multiplier.
wire_game_core.e2.gamePlayerSetDamageDealtMultiplier=Sets all players' damage dealt multiplier.
wire_game_core.e2.gamePlayerSetDamageTakenMultiplier(e.n)=Sets the player's damage taken multiplier.
wire_game_core.e2.gamePlayerSetDamageTakenMultiplier=Sets all players' damage taken multiplier.

#player requests
wire_game_core.e2.gameRequest=Sends a request for the player to join your game. Returns a GAMEREQUEST enum. Do note there is a delay between sending requests on the same player.
wire_game_core.e2.gameRespawnClk=Returns the player that respawned if the current execution was caused by "runOnGameRespawn".
wire_game_core.e2.gameRequestResponseClk=Returns a GAMERESPONSE enum if the current execution was caused by "runOnGameRequestResponse".
wire_game_core.e2.gameRequestResponsePlayer=Returns the player that responded to the game request if the current execution was caused by "runOnGameRequestResponse".
wire_game_core.e2.runOnGameRequestResponse=If set to 1, the expression will execute upon receiving a game request response.

#game defaults
wire_game_core.e2.gameSetDefaultArmor=Sets the default armor that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultCrouchSpeedMultiplier=Sets the default crouch speed multiplier that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultFlashlight=Sets the state that joining players or respawning players will have their flashlight set to.
wire_game_core.e2.gameSetDefaultGravity=Sets the gravity multiplier that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultHealth=Sets the health that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultLadderSpeed=Sets the ladder climbing speed that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultMaxHealth=Sets the maximum health that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultRespawnDelay=Sets the respawn delay for the GAMERESPAWNMODE_DELAYED respawn mode.
wire_game_core.e2.gameSetDefaultRespawnMode=Sets the respawn mode using a GAMERESPAWNMODE enum.
wire_game_core.e2.gameSetDefaultRunSpeed=Sets the run speed that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultSpeed=Sets the movement speed that joining players or respawning players will spawn with.
wire_game_core.e2.gameSetDefaultWalkSpeed=Sets the walk speed that joining players or respawning players will spawn with.

### e2helper wip descriptions
wire_game_core.e2_wip.gameSetDefaultGravity=Gravity is not synced between the server and client as the SetGravity method is not predicted. With high amounts of latency, players may notice some jittering. Check the issue trakcer, #3648.